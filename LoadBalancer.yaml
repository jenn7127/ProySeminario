AWSTemplateFormatVersion: "2010-09-09"

Description: >
  VPC con 2 subnet publicas y dos privadas
Parameters:
  
  CidrBlock:
    Description: rango de CidrBlock
    Type: String
    Default: 10.10.0.0/16



Resources:
  
  ElasticLoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
      HealthCheck:
        Target: 'HTTP:80/'
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '90'
        Timeout: '60'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: dc91b941-1023-45bb-aa4e-a1f4563568af
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access on port 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 63526dfa-c3cb-4c96-b613-b5a13b8b466f
  WebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AvailabilityZones:
        - !GetAtt 
          - PrivateSubnet1
          - AvailabilityZone
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '1'
      MaxSize: '10'
      DesiredCapacity: 1
      LoadBalancerNames:
        - !Ref ElasticLoadBalancer
      Tags:
        - Key: Network
          Value: Public
          PropagateAtLaunch: 'true'
    Metadata:
      'AWS::CloudFormation::Designer':        
        id: 9fc44bf6-aad5-4faa-82e1-397346f5bd21
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      UserData: !Base64 '80'
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      InstanceType: !Ref InstanceType
    Metadata:
      'AWS::CloudFormation::Designer':
        id: fc8b59e1-174d-44bb-8151-b213228484b5
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access on the configured port
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 580ee2c6-3562-4e16-a473-bbc37456b830
